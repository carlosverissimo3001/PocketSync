// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  username        String           @unique
  password        String
  createdAt       DateTime         @default(now()) @map("created_at")
  lists           List[]
  bufferedChanges BufferedChange[]
}

model List {
  id                 String           @id @default(uuid())
  name               String           @map("name")
  createdAt          DateTime         @default(now()) @map("created_at")
  ownerId            String           @map("owner_id")
  owner              User             @relation(fields: [ownerId], references: [id])
  updatedAt          DateTime         @map("updated_at")
  items              ListItem[]
  deleted            Boolean          @default(false)
  lastEditorUsername String?
  bufferedChanges    BufferedChange[]
}

model ListItem {
  id                 String   @id @default(uuid())
  name               String
  quantity           Int
  checked            Boolean  @default(false)
  updatedAt          DateTime @map("updated_at")
  listId             String   @map("list_id")
  list               List     @relation(fields: [listId], references: [id])
  createdAt          DateTime @default(now()) @map("created_at")
  deleted            Boolean  @default(false)
  lastEditorUsername String? // Different items from the same list can have different last editors, this is good for tracking changes
}

model BufferedChange {
  id           String   @id @default(uuid())
  userId       String // User who made the change
  listId       String? // The list affected (nullable for batch changes)
  changes      Json // Metadata of the changes as JSON
  timestamp    DateTime @default(now())
  resolved     Boolean  @default(false) // Whether the change has been processed
  isProcessing Boolean  @default(false) // Whether the change is currently being processed

  // Relationships
  user User  @relation(fields: [userId], references: [id])
  list List? @relation(fields: [listId], references: [id])

  @@index([userId])
  @@index([listId])
}
